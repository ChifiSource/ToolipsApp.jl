var documenterSearchIndex = {"docs":
[{"location":"extensions/toolips_defaults/","page":"toolips defaults","title":"toolips defaults","text":"<link rel=\"preconnect\" href=\"https://fonts.googleapis.com\">\n<link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin>\n<link href=\"https://fonts.googleapis.com/css2?family=Poppins&family=Roboto+Mono:wght@100&family=Rubik:wght@500&display=swap\" rel=\"stylesheet\">\n\n<style>\nbody {background-color: white !important;}\nheader {background-color: white !important;}\ndiv {width: 100% important!;}\nh1 {\n  font-family: 'Poppins', sans-serif !important;\n  font-family: 'Roboto Mono', monospace !important;\n  font-family: 'Rubik', sans-serif !important;}\n\n  h2 {\n    font-family: 'Poppins', sans-serif !important;\n    font-family: 'Roboto Mono', monospace !important;\n    font-family: 'Rubik', sans-serif !important;}\n    h4 { color: #03045e !important;\n      font-family: 'Poppins', sans-serif !important;\n      font-family: 'Roboto Mono', monospace !important;\n      font-family: 'Rubik', sans-serif !important;}\narticle {\n  padding: 20px;\n  width: 100% !important;\n  border-radius: 30px !important;\n  border-color: black !important;\n}\npre {\n  border-radius: 10px !important;\n  border-color: gray !important;\n}\np { color: #00147e !important;}\n  font-family: 'Poppins', sans-serif;\nfont-family: 'Roboto Mono', monospace;\nfont-family: 'Rubik', sans-serif; color: black;}\n</style>\n<div align = \"center\">\n<img src = \"../../assets/toolipsdefaults.png\"></img>\n</div>","category":"page"},{"location":"extensions/toolips_defaults/","page":"toolips defaults","title":"toolips defaults","text":"Modules = [ToolipsDefaults]","category":"page"},{"location":"extensions/toolips_defaults/#ToolipsDefaults.containertextbox-Tuple{String, String}","page":"toolips defaults","title":"ToolipsDefaults.containertextbox","text":"Toolips Defaults\n\ntextbox(name::String, containername::String; text::String = \"text\") -> ::Component\n\n\n\nCreates a containertextbox component.\n\nexample\n\n\n\n\n\n\n\n","category":"method"},{"location":"extensions/toolips_defaults/#ToolipsDefaults.numberinput","page":"toolips defaults","title":"ToolipsDefaults.numberinput","text":"Toolips Defaults\n\nnumberinput(name::String, range::UnitRange = 1:10; value::Integer = 5) -> ::Component\n\n\n\nCreates a number input component.\n\nexample\n\n\n\n\n\n\n\n","category":"function"},{"location":"extensions/toolips_defaults/#ToolipsDefaults.rangeslider","page":"toolips defaults","title":"ToolipsDefaults.rangeslider","text":"Toolips Defaults\n\nrangeslider(name::String, range::UnitRange = 1:100; value::Integer = 50, step::Integer = 5) -> ::Component\n\n\n\nCreates a range slider component.\n\nexample\n\n\n\n\n\n\n\n","category":"function"},{"location":"extensions/toolips_defaults/#ToolipsDefaults.textbox","page":"toolips defaults","title":"ToolipsDefaults.textbox","text":"Toolips Defaults\n\ntextbox(name::String, range::UnitRange = 1:10; text::String = \"\", size::Integer = 10) -> ::Component\n\n\n\nCreates a textbox component.\n\nexample\n\n\n\n\n\n\n\n","category":"function"},{"location":"extensions/toolips_session/","page":"toolips session","title":"toolips session","text":"<link rel=\"preconnect\" href=\"https://fonts.googleapis.com\">\n<link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin>\n<link href=\"https://fonts.googleapis.com/css2?family=Poppins&family=Roboto+Mono:wght@100&family=Rubik:wght@500&display=swap\" rel=\"stylesheet\">\n\n<style>\nbody {background-color: white !important;}\nheader {background-color: white !important;}\ndiv {width: 100% important!;}\nh1 {\n  font-family: 'Poppins', sans-serif !important;\n  font-family: 'Roboto Mono', monospace !important;\n  font-family: 'Rubik', sans-serif !important;}\n\n  h2 {\n    font-family: 'Poppins', sans-serif !important;\n    font-family: 'Roboto Mono', monospace !important;\n    font-family: 'Rubik', sans-serif !important;}\n    h4 { color: #03045e !important;\n      font-family: 'Poppins', sans-serif !important;\n      font-family: 'Roboto Mono', monospace !important;\n      font-family: 'Rubik', sans-serif !important;}\narticle {\n  padding: 20px;\n  width: 100% !important;\n  border-radius: 30px !important;\n  border-color: red !important;\n}\npre {\n  border-radius: 10px !important;\n  border-color: pink !important;\n  border-style: dashed !important;\n}\np { color: #00147e !important;}\n  font-family: 'Poppins', sans-serif;\nfont-family: 'Roboto Mono', monospace;\nfont-family: 'Rubik', sans-serif; color: black;}\n</style>\n<div align = \"center\">\n<img src = \"../../assets/toolipssession.png\"></img>\n</div>","category":"page"},{"location":"extensions/toolips_session/","page":"toolips session","title":"toolips session","text":"Modules = [ToolipsSession]","category":"page"},{"location":"extensions/toolips_session/#ToolipsSession.ToolipsSession","page":"toolips session","title":"ToolipsSession.ToolipsSession","text":"Created in June, 2022 by chifi - an open source software dynasty. by team toolips This software is MIT-licensed.\n\nToolipsSession\n\nExtension for:\n\nToolips This module provides the capability to make web-pages interactive by simply\n\nadding the Session extension to your ServerTemplate before starting. There are also methods contained for modifying Servables.\n\nModule Composition\n\nToolipsSession\n\n\n\n\n\n","category":"module"},{"location":"extensions/toolips_session/#ToolipsSession.ComponentModifier","page":"toolips session","title":"ToolipsSession.ComponentModifier","text":"ComponentModifier\n\nrootc::Dict\nf::Function\nchanges::Vector{String} The ComponentModifier stores a dictionary of components that can be indexed\n\nusing the Components themselves or their names. Methods push strings to the changes Dict. This is passed as an argument into the function provided to the on functions via the do syntax. Indexing will yield a given Component, setting the index to a pair will modify said component.\n\nexample\n\nroute(\"/\") do c::Connection\n    mydiv = divider(\"mydiv\", align = \"center\")\n    on(c, mydiv, \"click\") do cm::Modifier\n        if cm[mydiv][\"align\"] == \"center\"\n            cm[mydiv] = \"align\" => \"left\"\n        else\n            cm[mydiv] = \"align\" => \"center\"\n        end\n    end\n    write!(c, mydiv)\nend\n\n\n\nconstructors\n\nComponentModifier(html::String)\nComponentModifier(html::String, readonly::Vector{String})\n\n\n\n\n\n","category":"type"},{"location":"extensions/toolips_session/#ToolipsSession.Session","page":"toolips session","title":"ToolipsSession.Session","text":"Session\n\ntype::Vector{Symbol}\nf::Function\nactive_routes::Vector{String}\nevents::Dict{String, Pair{String, Function}}\nreadonly::Dict{String, Vector{String}}\niptable::Dict{String, Dates.DateTime}\ntimeout::Integer\n\nProvides session capabilities and full-stack interactivity to a toolips server. Note that the route you want to be interactive must be in active_routes!\n\nexample\n\nexts = [Session()]\nst = ServerTemplate(extensions = exts)\nserver = st.start()\n\nroute!(server, \"/\") do c::Connection\n    myp = p(\"myp\", text = \"welcome to my site\")\n    on(c, myp, \"click\") do cm::ComponentModifier\n        if cm[myp][:text] == \"welcome to my site\"\n            set_text!(cm, myp, \"unwelcome to my site\")\n        else\n            set_text!(cm, myp, \"welcome to my site\")\n        end\n    end\n    write!(c, myp)\nend\n\n\n\nconstructors\n\nSession(activeroutes::Vector{String} = [\"/\"];         transitionduration::AbstractFloat = 0.5,         transition::String = \"ease-in-out\",         timeout::Integer = 30         )\n\n\n\n\n\n","category":"type"},{"location":"extensions/toolips_session/#Base.append!-Tuple{ToolipsSession.Modifier, Servable, Servable}","page":"toolips session","title":"Base.append!","text":"Session Interface\n\nappend!(cm::Modifier, s::Servable, child::Servable) -> _\n\n\n\nAppends child to the servable s.\n\nexample\n\nfunction home(c::Connection)\n    mybutton = button(\"mybutton\", text = \"click to change alignment\", align = \"left\")\n    newptext = p(\"newp\", text = \"this text is added to our div\")\n    mydiv = div(\"mydiv\")\n    on(c, mybutton, \"click\") do cm::Modifier\n        append!(cm, mydiv, newptext)\n    end\n    write!(c, mybutton)\n    write!(c, mydiv)\nend\n\n\n\n\n\n","category":"method"},{"location":"extensions/toolips_session/#Base.append!-Tuple{ToolipsSession.Modifier, String, Servable}","page":"toolips session","title":"Base.append!","text":"Session Interface\n\nappend!(cm::Modifier, name::String, child::Servable) -> _\n\n\n\nAppends child to the servable s by name.\n\nexample\n\nfunction home(c::Connection)\n    mybutton = button(\"mybutton\", text = \"click to change alignment\", align = \"left\")\n    newptext = p(\"newp\", text = \"this text is added to our div\")\n    mydiv = div(\"mydiv\")\n    on(c, mybutton, \"click\") do cm::Modifier\n        append!(cm, \"mydiv\", newptext)\n    end\n    write!(c, mybutton)\n    write!(c, mydiv)\nend\n\n\n\n\n\n","category":"method"},{"location":"extensions/toolips_session/#Base.getindex-Tuple{Session, AbstractString}","page":"toolips session","title":"Base.getindex","text":"Session Interface\n\ngetindex(m::Session, s::AbstractString) -> ::Dict{String, Function}\n\n\n\nGets a session's refs by ip.\n\nexample\n\nroute(\"/\") do c::Connection\n    c[:Session][getip(c)]\nend\n\n\n\n\n\n","category":"method"},{"location":"extensions/toolips_session/#Base.getindex-Tuple{ToolipsSession.Modifier, String}","page":"toolips session","title":"Base.getindex","text":"Session Interface\n\ngetindex(cm::Modifier, s::String) -> ::Component\n\n\n\nGets the a Component by name from cm.\n\nexample\n\non(c, mydiv, \"click\") do cm::Modifier\n    mydiv = cm[\"mydiv\"]\n    mydivalignment = mydiv[\"align\"]\nend\n\n\n\n\n\n","category":"method"},{"location":"extensions/toolips_session/#Base.getindex-Tuple{ToolipsSession.Modifier, Toolips.AbstractComponent}","page":"toolips session","title":"Base.getindex","text":"Session Interface\n\ngetindex(cm::Modifier, s::Component) -> ::Component\n\n\n\nGets the Component s from the ComponentModifier cm.\n\nexample\n\non(c, mydiv, \"click\") do cm::Modifier\n    mydiv = cm[mydiv]\n    mydivalignment = mydiv[\"align\"]\nend\n\n\n\n\n\n","category":"method"},{"location":"extensions/toolips_session/#Base.setindex!-Tuple{Session, Any, AbstractString}","page":"toolips session","title":"Base.setindex!","text":"Session Interface\n\ngetindex(m::Session, d::Dict{String, Function}, s::AbstractString) -> _\n\n\n\nCreates a new Session.\n\nexample\n\nroute(\"/\") do c::Connection\n    c[:Session][getip(c)] = Dict{String, Function}\nend\n\n\n\n\n\n","category":"method"},{"location":"extensions/toolips_session/#Base.setindex!-Tuple{ToolipsSession.Modifier, Pair, String}","page":"toolips session","title":"Base.setindex!","text":"Session Interface\n\nsetindex!(cm::Modifier, p::Pair, s::String) -> _\n\n\n\nSets the property from p[1] to p[2] on the served with name s.\n\nexample\n\non(c, mydiv, \"click\") do cm::Modifier\n    if cm[\"mydiv\"][\"align\"] == \"center\"\n        cm[\"mydiv\"] = \"align\" => \"left\"\n    else\n        cm[\"mydiv\"] = \"align\" => \"center\"\n    end\nend\n\n\n\n\n\n","category":"method"},{"location":"extensions/toolips_session/#Base.setindex!-Tuple{ToolipsSession.Modifier, Pair, Toolips.AbstractComponent}","page":"toolips session","title":"Base.setindex!","text":"Session Interface\n\nsetindex!(cm::Modifier, p::Pair, s::Component) -> _\n\n\n\nSets the property from p[1] to p[2] on the served Component s.\n\nexample\n\non(c, mydiv, \"click\") do cm::Modifier\n    if cm[mydiv][\"align\"] == \"center\"\n        cm[mydiv] = \"align\" => \"left\"\n    else\n        cm[mydiv] = \"align\" => \"center\"\n    end\nend\n\n\n\n\n\n","category":"method"},{"location":"extensions/toolips_session/#Toolips.animate!-Tuple{ToolipsSession.Modifier, String, Animation}","page":"toolips session","title":"Toolips.animate!","text":"Session Interface\n\nanimate!(cm::Modifier, s::String, a::Animation; play::Bool) -> _\n\n\n\nUpdates the servable with name s's animation with the animation a.\n\nexample\n\n``` s = divider(\"mydiv\") a = Animation(\"fade\") a[:from] = \"opacity\" => \"0%\" a[:to] = \"opacity\" => \"100%\"\n\nwhere c is the Connection.\n\non(c, s, \"click\") do cm::Modifier     animate!(cm, s, a) end      ```\n\n\n\n\n\n","category":"method"},{"location":"extensions/toolips_session/#Toolips.animate!-Tuple{ToolipsSession.Modifier, Toolips.AbstractComponent, Animation}","page":"toolips session","title":"Toolips.animate!","text":"Session Interface\n\nanimate!(cm::Modifier, s::Servable, a::Animation; play::Bool) -> _\n\n\n\nUpdates the servable s's animation with the animation a.\n\nexample\n\ns = divider(\"mydiv\")\na = Animation(\"fade\")\na[:from] = \"opacity\" => \"0%\"\na[:to] = \"opacity\" => \"100%\"\n# where c is the Connection.\non(c, s, \"click\") do cm::Modifier\n    animate!(cm, s, a)\nend\n\n\n\n\n\n","category":"method"},{"location":"extensions/toolips_session/#Toolips.kill!-Tuple{Connection, AbstractString, Servable}","page":"toolips session","title":"Toolips.kill!","text":"Session Interface\n\nkill!(c::Connection, event::AbstractString, s::Servable) -> _\n\n\n\nRemoves a given event call from a connection's Session.\n\nexample\n\nroute(\"/\") do c::Connection\n    myp = p(\"hello\", text = \"wow\")\n    on(c, \"load\") do cm::ComponentModifier\n        set_text!(cm, myp, \"not so wow\")\n    end\n    write!(c, myp)\nend\n\n\n\n\n\n","category":"method"},{"location":"extensions/toolips_session/#Toolips.kill!-Tuple{Connection}","page":"toolips session","title":"Toolips.kill!","text":"Session Interface\n\nkill!(c::Connection)\n\n\n\nKills a Connection's saved events.\n\nexample\n\n\n\n\n\n\n\n","category":"method"},{"location":"extensions/toolips_session/#Toolips.style!-Tuple{ToolipsSession.Modifier, Servable, Pair}","page":"toolips session","title":"Toolips.style!","text":"Session Interface\n\nstyle!(cm::Modifier, s::Servable, p::Pair) -> _\n\n\n\nStyles the Servable s with the property and value in p.\n\nexample\n\nfunction home(c::Connection)\n    mybutton = button(\"mybutton\", text = \"click to change alignment\")\n    mydiv = div(\"mydiv\")\n    on(c, mybutton, \"click\") do cm::Modifier\n        style!(cm, mybutton, \"background-color\" => \"lightblue\")\n    end\n    write!(c, mybutton)\n    write!(c, mydiv)\nend\n\n\n\n\n\n","category":"method"},{"location":"extensions/toolips_session/#Toolips.style!-Tuple{ToolipsSession.Modifier, Servable, Style}","page":"toolips session","title":"Toolips.style!","text":"Session Interface\n\nstyle!(cm::Modifier, s::Servable, style::Style) -> _\n\n\n\nChanges the style class of s to the style p. Note – styles must be already written to the Connection prior.\n\nexample\n\nfunction home(c::Connection)\n    mystyle = Style(\"newclass\", \"background-color\" => \"blue\")\n    mybutton = button(\"mybutton\", text = \"click to change alignment\")\n    mydiv = div(\"mydiv\")\n    on(c, mybutton, \"click\") do cm::Modifier\n        style!(cm, mybutton, mystyle)\n    end\n    write!(c, mybutton)\n    write!(c, mydiv)\nend\n\n\n\n\n\n","category":"method"},{"location":"extensions/toolips_session/#Toolips.style!-Tuple{ToolipsSession.Modifier, Servable, Vararg{Pair{String, String}}}","page":"toolips session","title":"Toolips.style!","text":"Session Interface\n\nstyle!(cm::Modifier, s::Servable, p::Pair{String, String}) -> _\n\n\n\nStyles the Servable s with the properties and values in p.\n\nexample\n\nfunction home(c::Connection)\n    mybutton = button(\"mybutton\", text = \"click to change alignment\")\n    mydiv = div(\"mydiv\")\n    on(c, mybutton, \"click\") do cm::Modifier\n        style!(cm, mybutton, \"background-color\" => \"lightblue\", \"color\" => \"white\")\n    end\n    write!(c, mybutton)\n    write!(c, mydiv)\nend\n\n\n\n\n\n","category":"method"},{"location":"extensions/toolips_session/#Toolips.style!-Tuple{ToolipsSession.Modifier, Servable, Vector{Pair{String, String}}}","page":"toolips session","title":"Toolips.style!","text":"Session Interface\n\nstyle!(cm::Modifier, name::String, p::Vector{Pair{String, String}}) -> _\n\n\n\nStyles a Servable by name with the properties and values in p.\n\nexample\n\nfunction home(c::Connection)\n    mybutton = button(\"mybutton\", text = \"click to change alignment\")\n    mydiv = div(\"mydiv\")\n    on(c, mybutton, \"click\") do cm::Modifier\n        style!(cm, mybutton, [\"background-color\" => \"lightblue\"])\n    end\n    write!(c, mybutton)\n    write!(c, mydiv)\nend\n\n\n\n\n\n","category":"method"},{"location":"extensions/toolips_session/#Toolips.style!-Tuple{ToolipsSession.Modifier, String, Pair}","page":"toolips session","title":"Toolips.style!","text":"Session Interface\n\nstyle!(cm::Modifier, name::String, p::Pair) -> _\n\n\n\nStyles a Servable by name with the property and value in p.\n\nexample\n\nfunction home(c::Connection)\n    mybutton = button(\"mybutton\", text = \"click to change alignment\")\n    mydiv = div(\"mydiv\")\n    on(c, mybutton, \"click\") do cm::Modifier\n        style!(cm, \"mybutton\", \"background-color\" => \"lightblue\")\n    end\n    write!(c, mybutton)\n    write!(c, mydiv)\nend\n\n\n\n\n\n","category":"method"},{"location":"extensions/toolips_session/#Toolips.style!-Tuple{ToolipsSession.Modifier, String, String}","page":"toolips session","title":"Toolips.style!","text":"Session Interface\n\nstyle!(cm::Modifier, name::String, sname::String) -> _\n\n\n\nChanges the style class of a Servable by name to the style p by name. Note – styles must be already written to the Connection prior.\n\nexample\n\nfunction home(c::Connection)\n    mystyle = Style(\"newclass\", \"background-color\" => \"blue\")\n    mybutton = button(\"mybutton\", text = \"click to change alignment\")\n    mydiv = div(\"mydiv\")\n    on(c, mybutton, \"click\") do cm::Modifier\n        style!(cm, mybutton, \"newclass\") #<- name of mystyle\n    end\n    write!(c, mybutton)\n    write!(c, mydiv)\nend\n\n\n\n\n\n","category":"method"},{"location":"extensions/toolips_session/#Toolips.style!-Tuple{ToolipsSession.Modifier, String, Vararg{Pair{String, String}}}","page":"toolips session","title":"Toolips.style!","text":"Session Interface\n\nstyle!(cm::Modifier, s::String, p::Pair{String, String}) -> _\n\n\n\nStyles the Servable s by name with the properties and values in p.\n\nexample\n\nfunction home(c::Connection)\n    mybutton = button(\"mybutton\", text = \"click to change alignment\")\n    mydiv = div(\"mydiv\")\n    on(c, mybutton, \"click\") do cm::Modifier\n        style!(cm, \"mybutton\", \"background-color\" => \"lightblue\", \"color\" => \"white\")\n    end\n    write!(c, mybutton)\n    write!(c, mydiv)\nend\n\n\n\n\n\n","category":"method"},{"location":"extensions/toolips_session/#Toolips.style!-Tuple{ToolipsSession.Modifier, String, Vector{Pair{String, String}}}","page":"toolips session","title":"Toolips.style!","text":"Session Interface\n\nstyle!(cm::Modifier, name::String, p::Vector{Pair{String, String}}) -> _\n\n\n\nStyles a Servable by name with the properties and values in p.\n\nexample\n\nfunction home(c::Connection)\n    mybutton = button(\"mybutton\", text = \"click to change alignment\")\n    mydiv = div(\"mydiv\")\n    on(c, mybutton, \"click\") do cm::Modifier\n        style!(cm, \"mybutton\", \"background-color\" => \"lightblue\")\n    end\n    write!(c, mybutton)\n    write!(c, mydiv)\nend\n\n\n\n\n\n","category":"method"},{"location":"extensions/toolips_session/#ToolipsSession.alert!-Tuple{ToolipsSession.Modifier, AbstractString}","page":"toolips session","title":"ToolipsSession.alert!","text":"Session Interface\n\nalert!(cm::Modifier, s::String) -> _\n\n\n\nSends an alert to the current session.\n\nexample\n\non(c, s, \"click\") do cm::Modifier\n    alert!(cm, \"oh no!\")\nend\n\n\n\n\n\n","category":"method"},{"location":"extensions/toolips_session/#ToolipsSession.confirm_redirects!-Tuple{ToolipsSession.Modifier}","page":"toolips session","title":"ToolipsSession.confirm_redirects!","text":"Session Interface\n\nconfirm_redirects!(cm::Modifier) -> _\n\n\n\nAdds an \"are you sure you want to leave this page... unsaved changes\" pop-up  when trying to leave the page. Can be undone with free_redirects!\n\nexample\n\nfunction home(c::Connection)\n    mybutton = button(\"mybutton\", text = \"click to change alignment\", redirects = \"free\")\n    mydiv = div(\"mydiv\")\n    on(c, mybutton, \"click\") do cm::Modifier\n        if cm[mybutton][\"redirects\"] == \"free\"\n            confirm_redirects!(cm)\n            cm[mybutton] = \"redirects\" => \"confirm\"\n        else\n            free_redirects!(cm)\n            cm[mybutton] = \"redirects\" => \"free\"\n        end\n    end\n    write!(c, mybutton)\n    write!(c, mydiv)\nend\n\n\n\n\n\n","category":"method"},{"location":"extensions/toolips_session/#ToolipsSession.document_linker-Tuple{Connection}","page":"toolips session","title":"ToolipsSession.document_linker","text":"Session Internals\n\ndocument_linker(c::Connection) -> _\n\n\n\nServed to /modifier/linker by the Session extension. This is where incoming data is posted to for a response.\n\nexample\n\n\n\n\n\n\n\n","category":"method"},{"location":"extensions/toolips_session/#ToolipsSession.free_redirects!-Tuple{ToolipsSession.Modifier}","page":"toolips session","title":"ToolipsSession.free_redirects!","text":"Session Interface\n\nfree_redirects!(cm::Modifier) -> _\n\n\n\nRemoves the \"are you sure you wish to leave\" box that can be created with confirm_redirects!\n\nexample\n\nfunction home(c::Connection)\n    mybutton = button(\"mybutton\", text = \"click to change alignment\", redirects = \"free\")\n    mydiv = div(\"mydiv\")\n    on(c, mybutton, \"click\") do cm::Modifier\n        if cm[mybutton][\"redirects\"] == \"free\"\n            confirm_redirects!(cm)\n            cm[mybutton] = \"redirects\" => \"confirm\"\n        else\n            free_redirects!(cm)\n            cm[mybutton] = \"redirects\" => \"free\"\n        end\n    end\n    write!(c, mybutton)\n    write!(c, mydiv)\nend\n\n\n\n\n\n","category":"method"},{"location":"extensions/toolips_session/#ToolipsSession.gen_ref-Tuple{}","page":"toolips session","title":"ToolipsSession.gen_ref","text":"Session\n\ngen_ref() -> ::String\n\n\n\nCreates a random string of 16 characters. This is used to map connections to specific events by the session.\n\nexample\n\ngen_ref()\n\"jfuR2wgprielweh3\"\n\n\n\n\n\n","category":"method"},{"location":"extensions/toolips_session/#ToolipsSession.get_text-Tuple{ToolipsSession.Modifier, Component}","page":"toolips session","title":"ToolipsSession.get_text","text":"Session Interface\n\nget_text(cm::Modifier, s::Component) -> ::String\n\n\n\nRetrieves the text of a given Component.\n\nexample\n\nfunction home(c::Connection)\n    mybutton = button(\"mybutton\", text = \"click to change alignment\", align = \"left\")\n    mydiv = div(\"mydiv\")\n    on(c, mybutton, \"click\") do cm::Modifier\n        current_buttont = get_text(cm, mybutton)\n    end\n    write!(c, mybutton)\n    write!(c, mydiv)\nend\n\n\n\n\n\n","category":"method"},{"location":"extensions/toolips_session/#ToolipsSession.get_text-Tuple{ToolipsSession.Modifier, String}","page":"toolips session","title":"ToolipsSession.get_text","text":"Session Interface\n\nget_text(cm::Modifier, s::String) -> ::String\n\n\n\nRetrieves the text of a given Component by name\n\nexample\n\nfunction home(c::Connection)\n    mybutton = button(\"mybutton\", text = \"click to change alignment\", align = \"left\")\n    mydiv = div(\"mydiv\")\n    on(c, mybutton, \"click\") do cm::Modifier\n        current_buttont = get_text(cm, \"mybutton\")\n    end\n    write!(c, mybutton)\n    write!(c, mydiv)\nend\n\n\n\n\n\n","category":"method"},{"location":"extensions/toolips_session/#ToolipsSession.htmlcomponent","page":"toolips session","title":"ToolipsSession.htmlcomponent","text":"Session Internals\n\nhtmlcomponent(s::String) -> ::Dict{String, Toolips.Component}\n\n\n\nConverts HTML into a dictionary of components.\n\nexample\n\ns = \"<div id = 'hello' align = 'center'></div>\"\ncomp = htmlcomponent(s)\ncomp[\"hello\"][\"align\"]\n    \"center\"\n\n\n\n\n\n","category":"function"},{"location":"extensions/toolips_session/#ToolipsSession.modify!-Tuple{ToolipsSession.Modifier, String, Pair}","page":"toolips session","title":"ToolipsSession.modify!","text":"Session Interface\n\nmodify!(cm::Modifier, s::Servable, p::Pair) -> _\n\n\n\nModifies the key property p[1] to p[2] on s\n\n\n\n\n\n","category":"method"},{"location":"extensions/toolips_session/#ToolipsSession.modify!-Tuple{ToolipsSession.Modifier, Toolips.AbstractComponent, Pair}","page":"toolips session","title":"ToolipsSession.modify!","text":"Session Interface\n\nmodify!(cm::Modifier, s::Servable, p::Pair) -> _\n\n\n\nModifies the key property p[1] to p[2] on s\n\n\n\n\n\n","category":"method"},{"location":"extensions/toolips_session/#ToolipsSession.modify!-Tuple{ToolipsSession.Modifier, Toolips.AbstractComponent, Vararg{Pair}}","page":"toolips session","title":"ToolipsSession.modify!","text":"Session Interface\n\nmodify!(cm::Modifier, s::Servable, p::Pair ...) -> _\n\n\n\nModifies the key properties of p[1] to the value of p[2] on s. This can also be done with setindex!\n\nexample\n\nfunction home(c::Connection)\n    mybutton = button(\"mybutton\", text = \"click to change alignment\", align = \"left\")\n    on(c, mybutton, \"click\") do cm::Modifier\n        cm[mybutton] = \"align\" = \"center\"\n    end\n    write!(c, mybutton)\nend\n\n\n\n\n\n","category":"method"},{"location":"extensions/toolips_session/#ToolipsSession.modify!-Tuple{ToolipsSession.Modifier, Toolips.AbstractComponent, Vector{Pair{String, String}}}","page":"toolips session","title":"ToolipsSession.modify!","text":"Session Interface\n\nmodify!(cm::Modifier, s::Servable, p::Vector{Pair{String, String}}) -> _\n\n\n\nModifies the key properties of i[1] => i[2] for i in p on s.\n\n\n\n\n\n","category":"method"},{"location":"extensions/toolips_session/#ToolipsSession.move!-Tuple{ToolipsSession.Modifier, Pair{Servable, Servable}}","page":"toolips session","title":"ToolipsSession.move!","text":"Session Interface\n\nmove!(cm::Modifier, p::Pair{Servable, Servable}) -> _\n\n\n\nMoves the servable p[2] to be a child of p[1].\n\nexample\n\nfunction home(c::Connection)\n    mybutton = button(\"mybutton\", text = \"click to change alignment\", align = \"left\")\n    mydiv = div(\"mydiv\")\n    on(c, mybutton, \"click\") do cm::Modifier\n        move!(cm, mybutton => mydiv)\n    end\n    write!(c, mybutton)\n    write!(c, mydiv)\nend\n\n\n\n\n\n","category":"method"},{"location":"extensions/toolips_session/#ToolipsSession.move!-Tuple{ToolipsSession.Modifier, Pair{String, String}}","page":"toolips session","title":"ToolipsSession.move!","text":"Session Interface\n\nmove!(cm::Modifier, p::Pair{String, String}) -> _\n\n\n\nMoves the servable p[2] to be a child of p[1] by name.\n\nexample\n\nfunction home(c::Connection)\n    mybutton = button(\"mybutton\", text = \"click to change alignment\", align = \"left\")\n    mydiv = div(\"mydiv\")\n    on(c, mybutton, \"click\") do cm::Modifier\n        move!(cm, \"mybutton\" => \"mydiv\")\n    end\n    write!(c, mybutton)\n    write!(c, mydiv)\nend\n\n\n\n\n\n","category":"method"},{"location":"extensions/toolips_session/#ToolipsSession.observe!","page":"toolips session","title":"ToolipsSession.observe!","text":"Session Interface\n\nobserve!(f::Function, c::Connection, cm::Modifier, name::String, time::Integer = 1000) -> _\n\n\n\nCreates a new event to happen in time. This is useful if you want to have a delay before some initial session call\n\nexample\n\nfunction home(c::Connection)\n    mybutton = button(\"mybutton\", text = \"button\")\n    mydiv = div(\"mydiv\")\n    on(c, mybutton, \"click\") do cm::Modifier\n        scroll_by!(cm, \"mydiv\", (0, 15))\n        observe!(c, cm, \"myobs\", 1000) do cm::ComponentModifier\n            scroll_by!(cm, \"mydiv\", (0, -15)) # < scrolls  the div back up after 1 second.\n        end\n    end\n    write!(c, mybutton)\n    write!(c, mydiv)\nend\n\n\n\n\n\n","category":"function"},{"location":"extensions/toolips_session/#ToolipsSession.observer","page":"toolips session","title":"ToolipsSession.observer","text":"Toolips Defaults\n\nobserver(f::Function, c::Connection, readonly::Vector{String} = Vector{String}(); time::Integer = 1000) -> Component{:script}\n\n\n\nCreates an observer.\n\nexample\n\nlen = 10\nhome = route(\"/\") do c::Connection\n    lenp = p(\"lenp\", text = 10)\n    example_observer = observer(c, \"observepage\") do cm::ComponentModifier\n        if len > 0\n            len -= 1\n            set_text!(cm, lenp, string(len))\n        else\n            remove!(cm, \"observepage\")\n        end\n    end\n    write!(c, lenp)\n    write!(c, example_observer)\nend\n\n\n\n\n\n","category":"function"},{"location":"extensions/toolips_session/#ToolipsSession.on","page":"toolips session","title":"ToolipsSession.on","text":"Session Interface\n\non(f::Function, c::Connection, event::AbstractString, readonly::Vector{String} = Vector{String}())\n\n\n\nCreates a new event for the current IP in a session. Performs the function on     the event. The function should take a ComponentModifier as an argument.     readonly will provide certain names to be read into the ComponentModifier.     This can help to improve Session's performance, as it will need to parse     less Components.\n\nexample\n\nroute(\"/\") do c::Connection\n    myp = p(\"hello\", text = \"wow\")\n    on(c, \"load\") do cm::ComponentModifier\n        set_text!(cm, myp, \"not so wow\")\n    end\n    write!(c, myp)\nend\n\n\n\n\n\n","category":"function"},{"location":"extensions/toolips_session/#ToolipsSession.on-2","page":"toolips session","title":"ToolipsSession.on","text":"Interface\n\non(f::Function, c::Connection, s::Component, event::AbstractString, readonly::Vector{String} = Vector{String})\n\n\n\nCreates a new event for the current IP in a session. Performs the function on     the event. The function should take a ComponentModifier as an argument.\n\nexample\n\nroute(\"/\") do c::Connection\n    myp = p(\"hello\", text = \"wow\")\n    on(c, myp, \"click\")\n        if cm[myp][:text] == \"wow\"\n            c[:Logger].log(\"wow.\")\n        end\n    end\n    write!(c, myp)\nend\n\n\n\n\n\n","category":"function"},{"location":"extensions/toolips_session/#ToolipsSession.on_keydown","page":"toolips session","title":"ToolipsSession.on_keydown","text":"Session Interface\n\non_keydown(f::Function, c::Connection, key::AbstractString, readonly::Vector{String} = Vector{String})\n\n\n\nCreates a new event for the current IP in a session. Performs f when the key     is pressed.\n\nexample\n\nhome = route(\"/\") do c::Connection\n    on_keydown(c, \"ArrowRight\") do cm::ComponentModifier\n        alert!(cm, \"right arrow press.\")\n    end\nend\n\n\n\n\n\n","category":"function"},{"location":"extensions/toolips_session/#ToolipsSession.on_keyup","page":"toolips session","title":"ToolipsSession.on_keyup","text":"Session Interface\n\non_keyup(f::Function, c::Connection, key::AbstractString, readonly::Vector{String} = Vector{String})\n\n\n\nCreates a new event for the current IP in a session. Performs f when the key     is brought up.\n\nexample\n\nhome = route(\"/\") do c::Connection\n    on_keydown(c, \"ArrowRight\") do cm::ComponentModifier\n        alert!(cm, \"right arrow press.\")\n    end\nend\n\n\n\n\n\n","category":"function"},{"location":"extensions/toolips_session/#ToolipsSession.pauseanim!-Tuple{ToolipsSession.Modifier, String}","page":"toolips session","title":"ToolipsSession.pauseanim!","text":"Session Interface\n\npauseanim!(cm::Modifier, name::String) -> _\n\n\n\nPauses a servable's animation by name.\n\nexample\n\non(c, s, \"click\") do cm::Modifier\n    pauseanim!(cm, s.name)\nend\n\n\n\n\n\n","category":"method"},{"location":"extensions/toolips_session/#ToolipsSession.pauseanim!-Tuple{ToolipsSession.Modifier, Toolips.AbstractComponent}","page":"toolips session","title":"ToolipsSession.pauseanim!","text":"Session Interface\n\npauseanim!(cm::Modifier, s::Servable) -> _\n\n\n\nPauses the servable's animation.\n\nexample\n\non(c, s, \"click\") do cm::Modifier\n    pauseanim!(cm, s)\nend\n\n\n\n\n\n","category":"method"},{"location":"extensions/toolips_session/#ToolipsSession.playanim!-Tuple{ToolipsSession.Modifier, String}","page":"toolips session","title":"ToolipsSession.playanim!","text":"Session Interface\n\nplayanim!(cm::Modifier, name::String) -> _\n\n\n\nPlays a servable's animation by name.\n\nexample\n\non(c, s, \"click\") do cm::Modifier\n    playanim!(cm, s.name)\nend\n\n\n\n\n\n","category":"method"},{"location":"extensions/toolips_session/#ToolipsSession.playanim!-Tuple{ToolipsSession.Modifier, Toolips.AbstractComponent}","page":"toolips session","title":"ToolipsSession.playanim!","text":"Session Interface\n\nplayanim!(cm::Modifier, s::Servable) -> _\n\n\n\nPlays the servable's animation.\n\nexample\n\non(c, s, \"click\") do cm::Modifier\n    playanim!(cm, s)\nend\n\n\n\n\n\n","category":"method"},{"location":"extensions/toolips_session/#ToolipsSession.redirect!","page":"toolips session","title":"ToolipsSession.redirect!","text":"Session Interface\n\nredirect!(cm::Modifier, url::AbstractString, delay::Int64 = 0) -> _\n\n\n\nRedirects the session to url. Can be given delay with delay.\n\nexample\n\nurl = \"https://toolips.app\"\non(c, s, \"click\") do cm::Modifier\n    redirect!(cm, url, 3) # waits three seconds, then navigates to toolips.app\nend\n\n\n\n\n\n","category":"function"},{"location":"extensions/toolips_session/#ToolipsSession.remove!-Tuple{ToolipsSession.Modifier, Servable}","page":"toolips session","title":"ToolipsSession.remove!","text":"Session Interface\n\nremove!(cm::Modifier, s::Servable) -> _\n\n\n\nRemoves the servable s.\n\nexample\n\nfunction home(c::Connection)\n    mybutton = button(\"mybutton\", text = \"click to change alignment\", align = \"left\")\n    on(c, mybutton, \"click\") do cm::Modifier\n        remove!(cm, mybutton)\n    end\n    write!(c, mybutton)\nend\n\n\n\n\n\n","category":"method"},{"location":"extensions/toolips_session/#ToolipsSession.remove!-Tuple{ToolipsSession.Modifier, String}","page":"toolips session","title":"ToolipsSession.remove!","text":"Session Interface\n\nremove!(cm::Modifier, s::String) -> _\n\n\n\nRemoves the servable s by name.\n\nexample\n\nfunction home(c::Connection)\n    mybutton = button(\"mybutton\", text = \"click to change alignment\", align = \"left\")\n    on(c, mybutton, \"click\") do cm::Modifier\n        remove!(cm, \"mybutton\")\n    end\n    write!(c, mybutton)\nend\n\n\n\n\n\n","category":"method"},{"location":"extensions/toolips_session/#ToolipsSession.scroll_by!-Tuple{ToolipsSession.Modifier, String, Tuple{Int64, Int64}}","page":"toolips session","title":"ToolipsSession.scroll_by!","text":"Session Interface\n\nscroll_by!(cm::Modifier, s::String, xy::Tuple{Int64, Int64}) -> _\n\n\n\nScrolls the Component s by xy by name.\n\nexample\n\nfunction home(c::Connection)\n    mybutton = button(\"mybutton\", text = \"button\")\n    mydiv = div(\"mydiv\")\n    on(c, mybutton, \"click\") do cm::Modifier\n        scroll_by!(cm, \"mydiv\", (0, 15))\n    end\n    write!(c, mybutton)\n    write!(c, mydiv)\nend\n\n\n\n\n\n","category":"method"},{"location":"extensions/toolips_session/#ToolipsSession.scroll_by!-Tuple{ToolipsSession.Modifier, Toolips.AbstractComponent, Tuple{Int64, Int64}}","page":"toolips session","title":"ToolipsSession.scroll_by!","text":"Session Interface\n\nscroll_by!(cm::Modifier, s::AbstractComponent, xy::Tuple{Int64, Int64}) -> _\n\n\n\nScrolls the Component s by xy.\n\nexample\n\nfunction home(c::Connection)\n    mybutton = button(\"mybutton\", text = \"button\")\n    mydiv = div(\"mydiv\")\n    on(c, mybutton, \"click\") do cm::Modifier\n        scroll_by!(cm, mydiv, (0, 15))\n    end\n    write!(c, mybutton)\n    write!(c, mydiv)\nend\n\n\n\n\n\n","category":"method"},{"location":"extensions/toolips_session/#ToolipsSession.scroll_by!-Tuple{ToolipsSession.Modifier, Tuple{Int64, Int64}}","page":"toolips session","title":"ToolipsSession.scroll_by!","text":"Session Interface\n\nscroll_by!(cm::Modifier, xy::Tuple{Int64, Int64}) -> _\n\n\n\nScrolls the page by xy.\n\nexample\n\nfunction home(c::Connection)\n    mybutton = button(\"mybutton\", text = \"button\")\n    mydiv = div(\"mydiv\")\n    on(c, mybutton, \"click\") do cm::Modifier\n        scroll_by!(cm, (0, 15))\n    end\n    write!(c, mybutton)\n    write!(c, mydiv)\nend\n\n\n\n\n\n","category":"method"},{"location":"extensions/toolips_session/#ToolipsSession.scroll_to!-Tuple{ToolipsSession.Modifier, String, Tuple{Int64, Int64}}","page":"toolips session","title":"ToolipsSession.scroll_to!","text":"Session Interface\n\nscroll_to!(cm::Modifier, s::String, xy::Tuple{Int64, Int64}) -> _\n\n\n\nSets the Component's scroll to xy by name.\n\nexample\n\nfunction home(c::Connection)\n    mybutton = button(\"mybutton\", text = \"button\")\n    mydiv = div(\"mydiv\")\n    on(c, mybutton, \"click\") do cm::Modifier\n        scroll_to!(cm, \"mydiv\", (0, 15))\n    end\n    write!(c, mybutton)\n    write!(c, mydiv)\nend\n\n\n\n\n\n","category":"method"},{"location":"extensions/toolips_session/#ToolipsSession.scroll_to!-Tuple{ToolipsSession.Modifier, Toolips.AbstractComponent, Tuple{Int64, Int64}}","page":"toolips session","title":"ToolipsSession.scroll_to!","text":"Session Interface\n\nscroll_to!(cm::Modifier, s::AbstractComponent, xy::Tuple{Int64, Int64}) -> _\n\n\n\nSets the Component's scroll to xy.\n\nexample\n\nfunction home(c::Connection)\n    mybutton = button(\"mybutton\", text = \"button\")\n    mydiv = div(\"mydiv\")\n    on(c, mybutton, \"click\") do cm::Modifier\n        scroll_to!(cm, mydiv, (0, 15))\n    end\n    write!(c, mybutton)\n    write!(c, mydiv)\nend\n\n\n\n\n\n","category":"method"},{"location":"extensions/toolips_session/#ToolipsSession.scroll_to!-Tuple{ToolipsSession.Modifier, Tuple{Int64, Int64}}","page":"toolips session","title":"ToolipsSession.scroll_to!","text":"Session Interface\n\nscroll_to!(cm::Modifier, xy::Tuple{Int64, Int64}) -> _\n\n\n\nSets the page scroll to xy.\n\nexample\n\nfunction home(c::Connection)\n    mybutton = button(\"mybutton\", text = \"button\")\n    mydiv = div(\"mydiv\")\n    on(c, mybutton, \"click\") do cm::Modifier\n        scroll_to!(cm, (0, 15))\n    end\n    write!(c, mybutton)\n    write!(c, mydiv)\nend\n\n\n\n\n\n","category":"method"},{"location":"extensions/toolips_session/#ToolipsSession.set_children!-Tuple{ToolipsSession.Modifier, Servable, Vector{Servable}}","page":"toolips session","title":"ToolipsSession.set_children!","text":"Session Interface\n\nset_children!(cm::Modifier, s::Servable, v::Vector{Servable}) -> _\n\n\n\nSets the children of a given component.\n\nexample\n\nfunction home(c::Connection)\n    mybutton = button(\"mybutton\", text = \"click to change alignment\", align = \"left\")\n    mydiv = div(\"mydiv\")\n    on(c, mybutton, \"click\") do cm::Modifier\n        set_children!(cm, mydiv, [mybutton])\n    end\n    write!(c, mybutton)\n    write!(c, mydiv)\nend\n\n\n\n\n\n","category":"method"},{"location":"extensions/toolips_session/#ToolipsSession.set_children!-Tuple{ToolipsSession.Modifier, String, Vector{Servable}}","page":"toolips session","title":"ToolipsSession.set_children!","text":"Session Interface\n\nset_children!(cm::Modifier, s::String, v::Vector{Servable}) -> _\n\n\n\nSets the children of a given component by name.\n\nexample\n\nfunction home(c::Connection)\n    mybutton = button(\"mybutton\", text = \"click to change alignment\", align = \"left\")\n    newptext = p(\"newp\", text = \"this text is added to our div\")\n    mydiv = div(\"mydiv\")\n    on(c, mybutton, \"click\") do cm::Modifier\n        set_children!(cm, \"mydiv\", [newptext])\n    end\n    write!(c, mybutton)\n    write!(c, mydiv)\nend\n\n\n\n\n\n","category":"method"},{"location":"extensions/toolips_session/#ToolipsSession.set_text!-Tuple{ToolipsSession.Modifier, Servable, String}","page":"toolips session","title":"ToolipsSession.set_text!","text":"Session Interface\n\nset_text!(cm::Modifier, s::Servable, txt::String) -> _\n\n\n\nSets the inner HTML of a Servable.\n\nexample\n\nfunction home(c::Connection)\n    mybutton = button(\"mybutton\", text = \"click to change text\")\n    on(c, mybutton, \"click\") do cm::Modifier\n        set_text!(cm, mybutton, \"changed text\")\n    end\n    write!(c, mybutton)\nend\n\n\n\n\n\n","category":"method"},{"location":"extensions/toolips_session/#ToolipsSession.set_text!-Tuple{ToolipsSession.Modifier, String, String}","page":"toolips session","title":"ToolipsSession.set_text!","text":"Session Interface\n\nset_text!(cm::Modifier, s::String, txt::String) -> _\n\n\n\nSets the inner HTML of a Servable by name\n\nexample\n\nfunction home(c::Connection)\n    mybutton = button(\"mybutton\", text = \"click to change text\")\n    on(c, \"mybutton\", \"click\") do cm::Modifier\n        set_text!(cm, mybutton, \"changed text\")\n    end\n    write!(c, mybutton)\nend\n\n\n\n\n\n","category":"method"},{"location":"extensions/toolips_base64/","page":"toolips base64","title":"toolips base64","text":"<link rel=\"preconnect\" href=\"https://fonts.googleapis.com\">\n<link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin>\n<link href=\"https://fonts.googleapis.com/css2?family=Poppins&family=Roboto+Mono:wght@100&family=Rubik:wght@500&display=swap\" rel=\"stylesheet\">\n\n<style>\nbody {background-color: white !important;}\nheader {background-color: white !important;}\ndiv {width: 100% important!;}\nh1 {\n  font-family: 'Poppins', sans-serif !important;\n  font-family: 'Roboto Mono', monospace !important;\n  font-family: 'Rubik', sans-serif !important;}\n\n  h2 {\n    font-family: 'Poppins', sans-serif !important;\n    font-family: 'Roboto Mono', monospace !important;\n    font-family: 'Rubik', sans-serif !important;}\n    h4 { color: #03045e !important;\n      font-family: 'Poppins', sans-serif !important;\n      font-family: 'Roboto Mono', monospace !important;\n      font-family: 'Rubik', sans-serif !important;}\narticle {\n  padding: 20px;\n  width: 100% !important;\n  border-radius: 30px !important;\n  border-color: gold !important;\n}\npre {\n  border-radius: 10px !important;\n  border-color: red !important;\n}\np { color: black !important;}\n  font-family: 'Poppins', sans-serif;\nfont-family: 'Roboto Mono', monospace;\nfont-family: 'Rubik', sans-serif; color: black;}\n</style>\n<img src = \"../../assets/toolipsbase64.png\"></img>","category":"page"},{"location":"extensions/toolips_base64/","page":"toolips base64","title":"toolips base64","text":"Modules = [ToolipsBase64]","category":"page"},{"location":"extensions/toolips_base64/#ToolipsBase64.ToolipsBase64","page":"toolips base64","title":"ToolipsBase64.ToolipsBase64","text":"Created in July, 2022 by chifi - an open source software dynasty. by team toolips This software is MIT-licensed.\n\nToolipsBase64\n\nToolips Base64 exports the base64img Component, a component which can be created from regular image data.\n\nModule Composition\n\nToolipsBase64\n\n\n\n\n\n","category":"module"},{"location":"extensions/toolips_base64/#ToolipsBase64.base64img","page":"toolips base64","title":"ToolipsBase64.base64img","text":"Base64 Interface\n\nbase64img(name::String, raw::String, filetype::String = \"png\") -> ::Component\n\n\n\nCreates a Base64 image component from a raw string of image data.\n\nexample\n\nfunction serveb64(c::Connection)\n      rawpng = read(\"myimage.png\", String)\n      image = base64img(rawpng)\n      write!(c, image)\nend\n\n\n\n\n\n","category":"function"},{"location":"extensions/toolips_base64/#ToolipsBase64.base64img-2","page":"toolips base64","title":"ToolipsBase64.base64img","text":"Base64 Interface\n\nbase64img(name::String, raw::Any, filetype::String = \"png\") -> ::Component\n\n\n\nCreates a Base64 image component from any type shown with the image/filetype mime. For example, a plot which only shows as a png.\n\nexample\n\nfunction serveb64(c::Connection)\n      # this content could be a Julia Image, or a plot, in this example we assume\n      #    julia_img is a PNG Julia image.\n      image = base64img(julia_img, \"png\")\n      write!(c, image)\nend\n\n\n\n\n\n","category":"function"},{"location":"extensions/toolips_base64/#ToolipsBase64.update_base64!","page":"toolips base64","title":"ToolipsBase64.update_base64!","text":"Base64 Interface\n\nupdate_base64!(cm::ComponentModifier, name::String, raw::Any, filetype::String = \"png\") -> ::Component\n\n\n\nUpdates a given img component by name with the raw source as Base64\n\nexample\n\nfunction serveb64(c::Connection)\n      # this content could be a Julia Image, or a plot, in this example we assume\n      #    julia_img is a PNG Julia image.\n      image = base64img(\"myimage\", julia_img, \"png\")\n      on(c, image, \"click\") do cm::ComponentModifier\n            update_base64!(cm, \"image\", other_julia_img, \"png\")\n      end\n      write!(c, image)\nend\n\n\n\n\n\n","category":"function"},{"location":"extensions/toolips_base64/#ToolipsBase64.update_base64!-2","page":"toolips base64","title":"ToolipsBase64.update_base64!","text":"Base64 Interface\n\nupdate_base64!(cm::ComponentModifier, name::Component, raw::Any, filetype::String = \"png\") -> ::Component\n\n\n\nUpdates a given img component with the raw source as Base64\n\nexample\n\nfunction serveb64(c::Connection)\n      # this content could be a Julia Image, or a plot, in this example we assume\n      #    julia_img is a PNG Julia image.\n      image = base64img(\"image\", julia_img, \"png\")\n      on(c, image, \"click\") do cm::ComponentModifier\n            update_base64!(cm, image, other_julia_img, \"png\")\n      end\n      write!(c, image)\nend\n\n\n\n\n\n","category":"function"},{"location":"extensions/toolips_base64/#ToolipsBase64.update_base64!-3","page":"toolips base64","title":"ToolipsBase64.update_base64!","text":"Base64 Interface\n\nupdate_base64!(cm::ComponentModifier, name::String, raw::String, filetype::String = \"png\") -> ::Component\n\n\n\nUpdates a given img component by name with the raw source as Base64\n\nexample\n\nfunction serveb64(c::Connection)\n      # this content could be a Julia Image, or a plot, in this example we assume\n      #    julia_img is a PNG Julia image.\n      image = base64img(julia_img, \"png\")\n      on(c, image, \"click\") do cm::ComponentModifier\n            update_base64!(cm, \"image\", other_julia_img, \"png\")\n      end\n      write!(c, image)\nend\n\n\n\n\n\n","category":"function"},{"location":"extensions/toolips_markdown/","page":"toolips markdown","title":"toolips markdown","text":"<link rel=\"preconnect\" href=\"https://fonts.googleapis.com\">\n<link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin>\n<link href=\"https://fonts.googleapis.com/css2?family=Poppins&family=Roboto+Mono:wght@100&family=Rubik:wght@500&display=swap\" rel=\"stylesheet\">\n\n<style>\nbody {background-color: white !important;}\nheader {background-color: white !important;}\ndiv {width: 100% important!;}\nh1 {\n  font-family: 'Poppins', sans-serif !important;\n  font-family: 'Roboto Mono', monospace !important;\n  font-family: 'Rubik', sans-serif !important;}\n\n  h2 {\n    font-family: 'Poppins', sans-serif !important;\n    font-family: 'Roboto Mono', monospace !important;\n    font-family: 'Rubik', sans-serif !important;}\n    h4 { color: #03045e !important;\n      font-family: 'Poppins', sans-serif !important;\n      font-family: 'Roboto Mono', monospace !important;\n      font-family: 'Rubik', sans-serif !important;}\narticle {\n  padding: 20px;\n  width: 100% !important;\n  border-radius: 30px !important;\n  border-color: gray !important;\n}\npre {\n  border-radius: 10px !important;\n  border-color: gray !important;\n}\np { color: #00147e !important;}\n  font-family: 'Poppins', sans-serif;\nfont-family: 'Roboto Mono', monospace;\nfont-family: 'Rubik', sans-serif; color: black;}\n</style>\n<div align = \"center\">\n<img src = \"../../assets/toolipsmarkdown.png\"></img>\n</div>","category":"page"},{"location":"extensions/toolips_markdown/","page":"toolips markdown","title":"toolips markdown","text":"Modules = [ToolipsMarkdown]","category":"page"},{"location":"extensions/toolips_markdown/#ToolipsMarkdown.ToolipsMarkdown","page":"toolips markdown","title":"ToolipsMarkdown.ToolipsMarkdown","text":"Created in July, 2022 by chifi - an open source software dynasty. by team toolips This software is MIT-licensed.\n\nToolips Markdown\n\nA simple markdown to Toolips Component parser. Wraps markdown components into a Toolips.divier\n\nModule Composition\n\nToolipsMarkdown\n\n\n\n\n\n","category":"module"},{"location":"extensions/toolips_markdown/#ToolipsMarkdown.tmd","page":"toolips markdown","title":"ToolipsMarkdown.tmd","text":"Toolips Markdown\n\ntmd(name::String = \"tmd\", s::String = \"\") -> ::Component\n\n\n\nTurns a markdown string into a Toolips Component. Markdown will always use default styling.\n\nexample\n\nroute(\"/\") do c::Connection\n    mymdcomp = tmd(\"mainmarkdown\", \"# Hello! [click](http://toolips.app/)\")\n    write!(c, mymdcomp)\nend\n\n\n\n\n\n","category":"function"},{"location":"extensions/toolips_markdown/#ToolipsMarkdown.@tmd_str-Tuple{String}","page":"toolips markdown","title":"ToolipsMarkdown.@tmd_str","text":"Toolips Markdown\n\n@tmd_str -> ::Component\n\n\n\nTurns a markdown string into a Toolips Component. Markdown will always use default styling.\n\nexample\n\ntmd\"#hello world\"\n\n\n\n\n\n","category":"macro"},{"location":"extensions/toolips_remote/","page":"toolips remote","title":"toolips remote","text":"<link rel=\"preconnect\" href=\"https://fonts.googleapis.com\">\n<link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin>\n<link href=\"https://fonts.googleapis.com/css2?family=Poppins&family=Roboto+Mono:wght@100&family=Rubik:wght@500&display=swap\" rel=\"stylesheet\">\n\n<style>\nbody {background-color: white !important;}\nheader {background-color: white !important;}\ndiv {width: 100% important!;}\nh1 {\n  font-family: 'Poppins', sans-serif !important;\n  font-family: 'Roboto Mono', monospace !important;\n  font-family: 'Rubik', sans-serif !important;}\n\n  h2 {\n    font-family: 'Poppins', sans-serif !important;\n    font-family: 'Roboto Mono', monospace !important;\n    font-family: 'Rubik', sans-serif !important;}\n    h4 { color: #03045e !important;\n      font-family: 'Poppins', sans-serif !important;\n      font-family: 'Roboto Mono', monospace !important;\n      font-family: 'Rubik', sans-serif !important;}\narticle {\n  padding: 20px;\n  width: 100% !important;\n  border-color: blue !important;\n}\npre {\n  border-radius: 10px !important;\n  border-color: orange !important;\n}\np { color: black !important;}\n  font-family: 'Poppins', sans-serif;\nfont-family: 'Roboto Mono', monospace;\nfont-family: 'Rubik', sans-serif; color: black;}\n</style>\n<img src = \"../../assets/toolipsremote.png\"></img>","category":"page"},{"location":"extensions/toolips_remote/","page":"toolips remote","title":"toolips remote","text":"Modules = [ToolipsRemote]","category":"page"},{"location":"extensions/toolips_remote/#ToolipsRemote.ToolipsRemote","page":"toolips remote","title":"ToolipsRemote.ToolipsRemote","text":"Created in June, 2022 by chifi - an open source software dynasty. by team toolips This software is MIT-licensed.\n\nToolipsRemote\n\nExtension for:\n\nToolips This module provides the server extension Remote, an extension\n\nthat allows one to remotely call server commands from another Julia terminal. You can connect to a served Remote extension using the connect method.\n\nModule Composition\n\nToolipsRemote\n\n\n\n\n\n","category":"module"},{"location":"extensions/toolips_remote/#ToolipsRemote.Hash","page":"toolips remote","title":"ToolipsRemote.Hash","text":"Hash\n\nf::Function - The f function is used to return the Hash's value. Creates an anonymous hashing function for a string of length(n). Can be   indexed with nothing to retrieve Hash.\n\nexample\n\n# 64-character hash\nh = Hash(64)          #    vv getindex(::Hash)\nbuffer = Base.SecretBuffer(hash[])\nif String(buffer.data) == \"Password\"\n\n\n\nconstructors\n\nHash(n::Integer = 32)\nHash(s::String)\n\n\n\n\n\n","category":"type"},{"location":"extensions/toolips_remote/#ToolipsRemote.Remote","page":"toolips remote","title":"ToolipsRemote.Remote","text":"Remote <: Toolips.ServerExtension\n\ntype::Vector{Symbol}\nremotefunction::Function\nf::Function\nlogins::Dict{String, Hash}\nusers::Dict\nmotd::String - A message to be shown at the login screen.\n\nThe remote extension makes it possible to connect to your server from another Julia REPL. Can be provided with an alternative remote function as the first positional argument, as well as a new serving function as the second positional argument. A remote function should take a Connection and a String. A serving function should take only a Connection.\n\nexample\n\nr = Remote()\nst = ServerTemplate(extensions = [Remote()])\n\n\n\nconstructors\n\nRemote(remotefunction::Function = evaluator,         usernames::Vector{String};         motd::String, serving_f::Function)\n\n\n\n\n\n","category":"type"},{"location":"extensions/toolips_remote/#ToolipsRemote.connect-Tuple{String}","page":"toolips remote","title":"ToolipsRemote.connect","text":"Remote\n\nconnect(url::String) -> _\n\n\n\nConnects to a toolips session extension at the given URL. Ensure http:// is provided prior to the URL.\n\nexample\n\nconnect(\"http://127.0.0.1:8000\")\n\n\n\n\n\n","category":"method"},{"location":"extensions/toolips_remote/#ToolipsRemote.connected_repl-Tuple{AbstractString, String, String}","page":"toolips remote","title":"ToolipsRemote.connected_repl","text":"Remote\n\ngetindex(h::Hash) -> ::String\n\n\n\nCreates the linked remote REPL.\n\nexample\n\nconnectedrepl(\"myrepl\", \"http://127.0.0.1:8000\", key::String)\n\n\n\n\n\n","category":"method"},{"location":"extensions/toolips_remote/#ToolipsRemote.evaluator-Tuple{Connection, String}","page":"toolips remote","title":"ToolipsRemote.evaluator","text":"Remote\n\ngetindex(h::Hash) -> ::String\n\n\n\nRuns eval on any incoming connection strings.\n\nexample\n\nconnectedrepl(\"myrepl\", \"http://127.0.0.1:8000\", key::String)\n\n\n\n\n\n","category":"method"},{"location":"extensions/toolips_remote/#ToolipsRemote.getindex-Tuple{ToolipsRemote.Hash}","page":"toolips remote","title":"ToolipsRemote.getindex","text":"Remote\n\ngetindex(h::Hash) -> ::String\n\n\n\nRetrieves the value of the hashed data.\n\nexample\n\npwd = h[]\n\n\n\n\n\n","category":"method"},{"location":"extensions/toolips_remote/#ToolipsRemote.helpme-Tuple{Vector{String}, Connection}","page":"toolips remote","title":"ToolipsRemote.helpme","text":"helpme(args::Vector{String}) -> ::String\n\nThis is one of the default controller() functions. All of these functions are going to take args::Vector{String}. This will be the only function with this sort of documentation, as the rest will contain arg usage.\n\n\n\n\n\n","category":"method"},{"location":"extensions/toolips_remote/#ToolipsRemote.serve_remote-Tuple{Connection}","page":"toolips remote","title":"ToolipsRemote.serve_remote","text":"Remote\n\nserve_remote(c::Connection) -> _\n\n\n\nServers a remote login via the connect() method. This method is routed to /remote/connect\n\n\n\n\n\n","category":"method"},{"location":"developer_api/","page":"developer API","title":"developer API","text":"If you're looking at the internals, you are probably good enough at reading documentation... Here are the doc-strings, my friend. Thank you for contributing.","category":"page"},{"location":"developer_api/","page":"developer API","title":"developer API","text":"Toolips.write(::SpoofStream, ::Any)\nToolips.write(::SpoofStream, ::Servable)\nToolips.create_serverdeps\nToolips.serverfuncdefs\nToolips._start\nToolips.generate_router\nToolips._log\nToolips.string\nToolips.SpoofConnection\nToolips.SpoofStream\nToolips.route_from_dir\nToolips.show(::Base.TTY, ::Component)\nToolips.show(::Component)\nToolips.show_log\nToolips.@L_str\nToolips.has_extension(d::Dict, t::Type)\nToolips.argsplit\nToolips.string(::Vector{UInt8})\nToolips.showchildren","category":"page"},{"location":"developer_api/#Base.write-Tuple{SpoofStream, Any}","page":"developer API","title":"Base.write","text":"Internals\n\nwrite(s::SpoofStream, e::Any) -> _\n\n\n\nA binding to Base.write that allows one to write to SpoofStream.text.\n\nexample\n\ns = SpoofStream()\nwrite(s, \"hi\")\nprintln(s.text)\n    hi\n\n\n\n\n\n","category":"method"},{"location":"developer_api/#Base.write-Tuple{SpoofStream, Servable}","page":"developer API","title":"Base.write","text":"Internals\n\nwrite(s::SpoofStream, e::Servable) -> _\n\n\n\nA binding to Base.write that allows one to write a Servable to SpoofStream.text.\n\nexample\n\ns = SpoofStream()\nwrite(s, p(\"hello\"))\nprintln(s.text)\n    <p id = \"hello\"></p>\n\n\n\n\n\n","category":"method"},{"location":"developer_api/#Toolips.create_serverdeps","page":"developer API","title":"Toolips.create_serverdeps","text":"Internals\n\ncreate_serverdeps(name::String, exts::Vector{String} = [\"Logger\"], inc::String = \"\") -> _\n\n\n\nCreates the essential portions of the webapp file structure, where name is the project's name and inc is any extensions or strings to incorporate at the top of the file. Exts is a list of Server extensions.\n\nexample\n\ncreate_serverdeps(\"ToolipsApp\")\n\n\n\n\n\n","category":"function"},{"location":"developer_api/#Toolips.serverfuncdefs","page":"developer API","title":"Toolips.serverfuncdefs","text":"Core\n\nserverfuncdefs(routes::AbstractVector, extensions::Dict) -> add::Function, remove::Function\n\n\n\nThis method is a binding to create server functions from your routes and extensions dictionary.\n\nexample\n\n\n\n\n\n","category":"function"},{"location":"developer_api/#Toolips._start","page":"developer API","title":"Toolips._start","text":"Core - Internals\n\n_start(routes::AbstractVector, ip::String, port::Integer,\n\nextensions::Dict, c::Type) -> ::WebServer\n\nThis is an internal function for the ServerTemplate. This function is binded to     the ServerTemplate.start field.\n\nexample\n\nst = ServerTemplate()\nst.start()\n\n\n\n\n\n","category":"function"},{"location":"developer_api/#Toolips.generate_router","page":"developer API","title":"Toolips.generate_router","text":"Core - Internals\n\ngenerate_router(routes::AbstractVector, server::Any, extensions::Dict,\n\n        conn::Type)\n\n\n\nThis method is used internally by the _start method. It returns a closure function that both routes and calls functions.\n\nexample\n\nserver = Sockets.listen(Sockets.InetAddr(parse(IPAddr, ip), port))\nif has_extension(extensions, Logger)\n    extensions[Logger].log(1,\n     \"Toolips Server starting on port \" * string(port))\nend\nroutefunc, rdct, extensions = generate_router(routes, server, extensions,\n                                                Connection)\n@async HTTP.listen(routefunc, ip, port, server = server)\n\n\n\n\n\n","category":"function"},{"location":"developer_api/#Toolips._log","page":"developer API","title":"Toolips._log","text":"Extensions\n\n_log(level::Int64, message::String, levels::Dict, out::String) -> _\n\n\n\nBinded call for the field log() inside of Logger(). See ?(Logger) for more     details on the field log. All arguments are fields of that type. Return is a     printout into the REPL as well as an append to the log file, provided by the     out URI. –––––––––\n\nexample (Closure from Logger)\n\nlog(level::Int64, message::String) = _log(level, message, levels, out)\nlog(message::String) = _log(1, message, levels, out)\n\n\n\n\n\nExtensions\n\n_log(http::HTTP.Stream, message::String) -> _\n\n\n\nBinded call for the field log() inside of Logger(). This will log both to the     JavaScript/HTML console. –––––––––\n\nexample (Closure from Logger)\n\nlog(http::HTTP.Stream, message::String) = _log(http, message)\n\n\n\n\n\n","category":"function"},{"location":"developer_api/#Base.string","page":"developer API","title":"Base.string","text":"Internals\n\nstring(r::Vector{UInt8}) -> ::String\n\n\n\nTurns a vector of UInt8s into a string.\n\n\n\n\n\nInterface\n\nstring(c::AbstractComponent) -> ::String\n\n\n\nShows c as a string representation of itself.\n\nexample\n\nc = divider(\"example\", align = \"center\")\nstring(c)\n    \"divider: align = center\"\n\n\n\n\n\n","category":"function"},{"location":"developer_api/#Toolips.SpoofConnection","page":"developer API","title":"Toolips.SpoofConnection","text":"SpoofConnection <: AbstractConnection\n\nroutes::Dict\nhttp::SpoofStream\nextensions::Dict -\n\nBuilds a fake connection with a SpoofStream. Useful if you want to write a Servable without a server.\n\nexample\n\nfakec = SpoofConnection()\nservable = Component()\n# write!(::AbstractConnection, ::Servable):\nwrite!(fakec, servable)\n\n\n\nfield info\n\nroutes::Dict - A dictionary of routes, usually left empty.\nhttp::SpoofStream - A fake http stream that instead writes output to a string.\nextensions::Dict - A dictionary of extensions, usually empty.\n\n\n\nconstructors\n\nSpoofStream(r::Dict, http::SpoofStream, extensions::Dict)\nSpoofStream()\n\n\n\n\n\n","category":"type"},{"location":"developer_api/#Toolips.SpoofStream","page":"developer API","title":"Toolips.SpoofStream","text":"SpoofStream\n\ntext::String\n\nThe SpoofStream allows us to fake a connection by building a SpoofConnection which will write to the SpoofStream.text field whenever write! is called. This is useful for testing, or just writing servables into a string.\n\nexample\n\nstream = SpoofStream()\nwrite(stream, \"hello!\")\nprintln(stream.text)\n\n    hello!\nconn = SpoofConnection()\nservab = Component()\nwrite!(conn, servab)\n\n\n\nfield info\n\ntext::String - The text written to the stream.\n\n\n\nconstructors\n\nSpoofStream()\n\n\n\n\n\n","category":"type"},{"location":"developer_api/#Toolips.route_from_dir","page":"developer API","title":"Toolips.route_from_dir","text":"Extensions\n\nroutefromdir(dir::String) -> ::Vector{String}\n\n\n\nRecursively appends filenames for a directory AND all subsequent directories.\n\nexample\n\nx::Vector{String} = route_from_dir(\"mypath\")\n\n\n\n\n\n","category":"function"},{"location":"developer_api/#Toolips.show_log","page":"developer API","title":"Toolips.show_log","text":"Extensions\n\nshow_log(level::Int64, message::String, levels::Dict{Any, Crayon},\n\n            prefix::String, time::Any)\n\n\n\nPrints a log to the screen.\n\nexample\n\nshow_log(1, \"hello!\", levels, \"toolips> \", now()\n\n[2022:05:23:22:01] toolips> hello!\n\n\n\n\n\n","category":"function"},{"location":"developer_api/#Toolips.argsplit","page":"developer API","title":"Toolips.argsplit","text":"Internals\n\nargsplit(args::Vector{AbstractString}) -> ::Dict{Symbol, Any}\n\n\n\nUsed by the getargs method to parse GET arguments into a Dict.\n\nexample\n\nargsplit([\"c=5\", \"b=8\"])\n    Dict(:c => 5, :b => 8)\n\n\n\n\n\n","category":"function"},{"location":"developer_api/#Base.string-Tuple{Vector{UInt8}}","page":"developer API","title":"Base.string","text":"Internals\n\nstring(r::Vector{UInt8}) -> ::String\n\n\n\nTurns a vector of UInt8s into a string.\n\n\n\n\n\n","category":"method"},{"location":"developer_api/#Toolips.showchildren","page":"developer API","title":"Toolips.showchildren","text":"Internals\n\nshowchildren(x::AbstractComponent) -> ::String\n\n\n\nGet the children of x as a markdown string.\n\nexample\n\nc = divider(\"example\")\nchild = p(\"mychild\")\npush!(c, child)\ns = showchildren(c)\nprintln(s)\n\"##### children\n|-- mychild\n\n\n\n\n\n","category":"function"},{"location":"extensions/toolips_memwrite/","page":"toolips memwrite","title":"toolips memwrite","text":"<link rel=\"preconnect\" href=\"https://fonts.googleapis.com\">\n<link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin>\n<link href=\"https://fonts.googleapis.com/css2?family=Poppins&family=Roboto+Mono:wght@100&family=Rubik:wght@500&display=swap\" rel=\"stylesheet\">\n\n<style>\nbody {background-color: white !important;}\nheader {background-color: white !important;}\ndiv {width: 100% important!;}\nh1 {\n  font-family: 'Poppins', sans-serif !important;\n  font-family: 'Roboto Mono', monospace !important;\n  font-family: 'Rubik', sans-serif !important;}\n\n  h2 {\n    font-family: 'Poppins', sans-serif !important;\n    font-family: 'Roboto Mono', monospace !important;\n    font-family: 'Rubik', sans-serif !important;}\n    h4 { color: #03045e !important;\n      font-family: 'Poppins', sans-serif !important;\n      font-family: 'Roboto Mono', monospace !important;\n      font-family: 'Rubik', sans-serif !important;}\narticle {\n  padding: 20px;\n  width: 100% !important;\n  border-color: lightblue !important;\n}\npre {\n  border-radius: 10px !important;\n  border-color: lime !important;\n}\np { color: gray !important;}\n  font-family: 'Poppins', sans-serif;\nfont-family: 'Roboto Mono', monospace;\nfont-family: 'Rubik', sans-serif; color: black;}\n</style>\n<img src = \"../../assets/toolipsmemwrite.png\"></img>","category":"page"},{"location":"extensions/toolips_memwrite/","page":"toolips memwrite","title":"toolips memwrite","text":"Modules = [ToolipsMemWrite]","category":"page"},{"location":"extensions/toolips_memwrite/#ToolipsMemWrite.ToolipsMemWrite","page":"toolips memwrite","title":"ToolipsMemWrite.ToolipsMemWrite","text":"Created in July, 2022 by chifi - an open source software dynasty. by team toolips This software is MIT-licensed.\n\nToolipsMemWrite\n\nThe MemWrite extension allows Components to be saved via the memwrite! method and the ComponentMemory extension.\n\nModule Composition\n\nToolipsMemWrite\n\n\n\n\n\n","category":"module"},{"location":"extensions/toolips_memwrite/#ToolipsMemWrite.ComponentMemory","page":"toolips memwrite","title":"ToolipsMemWrite.ComponentMemory","text":"ComponentMemory <: Toolips.ServerExtension\n\ntype::Symbol - The type of this ServerExtension (:connection).\nlookup::Dict{String, String} - A dictionary of Component names and\n\noutputs.\n\nThe ComponentMemory extension allows for one to save the output     of ToolipsComponents for future writing. This is done by     loading this extension into a ServerTemplate, and then using     the memwrite! method in place of the write! method.\n\nexample\n\nusing Toolips\nusing ToolipsMemWrite\n\nfunction myroute(c::Connection)\n    mycomp = divider(\"mydivider\", align = \"center\")\n    myp = p(\"myp\", text = \"hello world!\")\n    push!(mycomp, myp)\n    othercomp = a(\"othercomp\", text = \"othercomp\")\n    # Saved:\n    memwrite!(c, mycomp)\n    # Not saved:\n    write!(c, othercomp)\nend\n\nst = ServerTemplate(extensions = [Logger(), ComponentMemory()])\nst.start()\n\n\n\nconstructors\n\nComponentMemory()\n\n\n\n\n\n","category":"type"},{"location":"extensions/toolips_memwrite/#Base.getindex-Tuple{ComponentMemory, Servable}","page":"toolips memwrite","title":"Base.getindex","text":"MemWrite Interface\n\ngetindex(cmem::ComponentMemory, s::Servable) -> ::Servable\n\n\n\nRetrieves the Servable s from the lookup dictionary in the ComponentMemory.\n\nexample\n\nusing Toolips\nusing ToolipsMemWrite\n\nfunction myroute(c::Connection)\n    mycomp = divider(\"mydivider\", align = \"center\")\n    myp = p(\"myp\", text = \"hello world!\")\n    memwrite!(c, mycomp)\n    c[:ComponentMemory][mycomp]\nend\n\n\n\n\n\n","category":"method"},{"location":"extensions/toolips_memwrite/#Base.getindex-Tuple{ComponentMemory, String}","page":"toolips memwrite","title":"Base.getindex","text":"MemWrite Interface\n\ngetindex(cmem::ComponentMemory, s::Servable) -> ::Servable\n\n\n\nRetrieves the Servable s by name from the lookup dictionary in the ComponentMemory.\n\nexample\n\nusing Toolips\nusing ToolipsMemWrite\n\nfunction myroute(c::Connection)\n    mycomp = divider(\"mydivider\", align = \"center\")\n    myp = p(\"myp\", text = \"hello world!\")\n    memwrite!(c, mycomp)\n    c[:ComponentMemory][\"mydivider\"]\nend\n\n\n\n\n\n","category":"method"},{"location":"extensions/toolips_memwrite/#ToolipsMemWrite.memwrite!-Tuple{AbstractConnection, Servable}","page":"toolips memwrite","title":"ToolipsMemWrite.memwrite!","text":"MemWrite Interface\n\nmemwrite!(c::AbstractConnection, s::Servable)\n\n\n\nWrites a Component to the Connection c, then saves the Component for future writing.\n\nexample\n\nfunction myroute(c::Connection)\n    mycomp = divider(\"mydivider\", align = \"center\")\n    myp = p(\"myp\", text = \"hello world!\")\n    push!(mycomp, myp)\n    othercomp = a(\"othercomp\", text = \"othercomp\")\n    # Saved:\n    memwrite!(c, mycomp)\n    # Not saved:\n    write!(c, othercomp)\nend\n\n\n\n\n\n","category":"method"},{"location":"extensions/toolips_memwrite/#ToolipsMemWrite.memwrite!-Tuple{AbstractConnection, Vector{Servable}}","page":"toolips memwrite","title":"ToolipsMemWrite.memwrite!","text":"MemWrite Interface\n\nmemwrite!(c::AbstractConnection, s::Vector{Servable}; write::Bool = true) -> ::Bool\n\n\n\nWrites the Components in s to the Connection c, then saves the Components for future writing. Returns a Bool telling as to whether or not the Components ARE available in MemWrite memory.write determines whether or not memwrite! should also write to your connection.\n\nroute(\"/\") do c::Connection\n    #  preserves connection integrity, while checking memory\n    if memwrite!(c, \"mydiv\", write = false) # will not add to memory if\n        memwrite!(c, \"mydiv\")\n        # Entering \"return\" breaks the function pipeline of our Connection.\n        return\n    end\n    # This only gets ran if the above condition is not met.\n    mydiv = divider(\"mydiv\", align = \"center\")\n    # vv will write to connection, and add to memory.\n    memwrite!(c, mydiv)\n\n\nNote that this can also be done with any other type that can be memwritten, use ?(memwrite!) for details. Also, involving on(), for example, or other functions that require the Connecction to run will also need to be put into this conditional statement, although it's important to remember not to write them.\n\nexample\n\nfunction myroute(c::Connection)\n    mycomp = divider(\"mydivider\", align = \"center\")\n    myp = p(\"myp\", text = \"hello world!\")\n    push!(mycomp, myp)\n    othercomp = a(\"othercomp\", text = \"othercomp\")\n    # Saved:\n    memwrite!(c, mycomp)\n    # Not saved:\n    write!(c, othercomp)\nend\n\n\n\n\n\n","category":"method"},{"location":"overview/","page":"overview","title":"overview","text":"<link rel=\"preconnect\" href=\"https://fonts.googleapis.com\">\n<link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin>\n<link href=\"https://fonts.googleapis.com/css2?family=Poppins&family=Roboto+Mono:wght@100&family=Rubik:wght@500&display=swap\" rel=\"stylesheet\">\n\n<style>\nbody {background-color: #FDF8FF !important;}\nheader {background-color: #FDF8FF !important}\nh1 {\n  font-family: 'Poppins', sans-serif !important;\n  font-family: 'Roboto Mono', monospace !important;\n  font-family: 'Rubik', sans-serif !important;}\n\n  h2 {\n    font-family: 'Poppins', sans-serif !important;\n    font-family: 'Roboto Mono', monospace !important;\n    font-family: 'Rubik', sans-serif !important;}\n    h4 { color: #03045e !important;\n      font-family: 'Poppins', sans-serif !important;\n      font-family: 'Roboto Mono', monospace !important;\n      font-family: 'Rubik', sans-serif !important;}\n      article {\n        border-radius: 30px !important;\n        border-color: lightblue !important;\n      }\n      pre {\n        border-radius: 10px !important;\n        border-color: #FFE5B4 !important;\n      }\np {font-family: 'Poppins', sans-serif;\nfont-family: 'Roboto Mono', monospace;\nfont-family: 'Rubik', sans-serif; color: #565656;}\nbutton {border-radius: 5px; padding: 7px; background-color: lightblue;\ncolor: white; font-size: 16pt; font-weight: bold; border-style: none; cursor: pointer; margin: 5px;}\nbutton:hover {background-color: orange;}\n</style>","category":"page"},{"location":"overview/#overview","page":"overview","title":"overview","text":"","category":"section"},{"location":"overview/","page":"overview","title":"overview","text":"Welcome to toolips, the hyper-extensible, versatile web-development framework for Julia. This web-framework focuses on extensibility, versatility, and ease of use. This overview will reveal how the different parts of toolips come together to create basic apps, as well as functioning web-apps.","category":"page"},{"location":"overview/#creating-apps","page":"overview","title":"creating apps","text":"","category":"section"},{"location":"overview/","page":"overview","title":"overview","text":"The first step to any toolips project is creating an app! Though you can certainly build toolips projects from normal julia modules, it is certainly quicker and more convenient to utilize the Toolips.new_app and Toolips.new_webapp methods respectively. Both of these methods take a String, this being your Julia project name.","category":"page"},{"location":"overview/","page":"overview","title":"overview","text":"using Toolips\nToolips.new_app(\"ExampleApp\")","category":"page"},{"location":"overview/","page":"overview","title":"overview","text":"Toolips.new_app\nToolips.new_webapp","category":"page"},{"location":"overview/#Toolips.new_app","page":"overview","title":"Toolips.new_app","text":"Core\n\nnew_app(::String) -> _\n\n\n\nCreates a minimalistic app, usually used for creating APIs and endpoints.\n\nexample\n\nusing Toolips\nToolips.new_app(\"ToolipsApp\")\n\n\n\n\n\n","category":"function"},{"location":"overview/#Toolips.new_webapp","page":"overview","title":"Toolips.new_webapp","text":"Core\n\nnew_webapp(::String) -> _\n\n\n\nCreates a fully-featured Toolips web-app. Adds ToolipsSession, ideal for full-stack web-sites.\n\nexample\n\nusing Toolips\nToolips.new_webapp(\"ToolipsApp\")\n\n\n\n\n\n","category":"function"},{"location":"overview/","page":"overview","title":"overview","text":"This will create a new Julia project with a dev.jl file and a prod.jl file, along with","category":"page"},{"location":"overview/#connections","page":"overview","title":"connections","text":"","category":"section"},{"location":"overview/","page":"overview","title":"overview","text":"Connections hold the routes, a selection of extensions, and the HTTP.Stream for the server. An AbstractConnection can also hold more depending on its type. Connections are passed as arguments into routes. We can write a route with this argument by either writing a function or by using the route syntax. Connections are written to using the write! method.","category":"page"},{"location":"overview/","page":"overview","title":"overview","text":"using Toolips\n\n# function\nfunction home(c::Connection)\n  write!(c, \"hello world!\")\nend\n\nhomeroute = route(\"/\", home)\n# route/do\nhomeroute = route(\"/\") do c::Connection\n  write!(c, \"hello world!\")\nend","category":"page"},{"location":"overview/","page":"overview","title":"overview","text":"Connections can be indexed with a Symbol to yield a ServerExtension of that name, or indexed with a String to yield that route's function. They can also be rerouted with route! or setindex!.","category":"page"},{"location":"overview/#servables","page":"overview","title":"servables","text":"","category":"section"},{"location":"overview/","page":"overview","title":"overview","text":"Servables are any type that has a Function f, which takes a Connection. In the scope of toolips' base, this includes the File Servable and sub-types of AbstractComponent, which includes Component, Style, and Animation.","category":"page"},{"location":"overview/","page":"overview","title":"overview","text":"using Toolips\ncomp = div(\"mydiv\", text = \"hello world!\")\ntypeof(comp)","category":"page"},{"location":"overview/","page":"overview","title":"overview","text":"Components are most often created via the various Component methods available across the toolips ecosystem, but can also be created via the Component constructor.","category":"page"},{"location":"overview/","page":"overview","title":"overview","text":"using Toolips\ncomp = Component(\"myb\", \"b\", \"align\" => \"center\")\nshow(comp)","category":"page"},{"location":"overview/","page":"overview","title":"overview","text":"Components take an infinite number of arguments which are HTML attributes. In the example above, we set the align of our myb to center. There are also more methods for this type, such as style!, animate!, push!, and more where","category":"page"},{"location":"overview/","page":"overview","title":"overview","text":"style! sets the Style of a Component, or styles a Component with Pairs.\nanimate! animates a Component with an Animation.\npush! composes a Component into another Component.","category":"page"},{"location":"overview/","page":"overview","title":"overview","text":"using Toolips\n\nfunction home(c::Connection)\n  examplepdiv = div(\"examplepdiv\")\n  style!(examplepdiv, \"border-width\" => 2px, \"border-style\" => \"solid\", \"border-color\" => \"lightblue\") # <- Styles examplepdiv\n  myp = p(\"exampleb\", text = \"hello world!\")\n  push!(examplepdiv, myp) # <- puts myb into examplepdiv\n  write!(c, examplepdiv)\nend","category":"page"},{"location":"overview/","page":"overview","title":"overview","text":"$examplepdiv","category":"page"},{"location":"overview/#extensions","page":"overview","title":"extensions","text":"","category":"section"},{"location":"overview/","page":"overview","title":"overview","text":"Extensions are the bread to the butter of toolips. These are all sub-types of the ServerExtension type. Two examples of extensions from toolips are the Files and Logger extensions. These are typically provided to ToolipsServer constructors using the extensions key-word argument.","category":"page"},{"location":"overview/","page":"overview","title":"overview","text":"using Toolips\n\nws = WebServer(\"127.0.0.1\", 8000, extensions = [Logger(), Files()])\nshow(ws)","category":"page"},{"location":"overview/","page":"overview","title":"overview","text":"Some extensions will be loaded into the Connection, some extensions modify the routes of a given Connection, and some extensions","category":"page"},{"location":"overview/","page":"overview","title":"overview","text":"using Toolips\nshow(Logger().type); print(\"\\n\")\nshow(Files().type)","category":"page"},{"location":"overview/","page":"overview","title":"overview","text":"An extension can also be of multiple types by using a Vector{Symbol}, as is the case with Session, for example.","category":"page"},{"location":"overview/","page":"overview","title":"overview","text":"using Toolips\nusing ToolipsSession\nshow(Session().type)","category":"page"},{"location":"overview/","page":"overview","title":"overview","text":"using Toolips\nws = WebServer(\"127.0.0.1\", 8000, extensions = [Logger(), Files()])","category":"page"},{"location":"overview/#servers","page":"overview","title":"servers","text":"","category":"section"},{"location":"overview/","page":"overview","title":"overview","text":"Servers take your routes and start them using the ToolipsServer.start() method. We have the option to build a server with either a WebServer or a ServerTemplate. Of course, we can also create our own servers by following the consistencies of ToolipsServer. These constructors will take our routes, extensions, ip and port, and make a start/stoppable object","category":"page"},{"location":"overview/","page":"overview","title":"overview","text":"using Toolips\n\nws = WebServer(\"127.0.0.1\", 8000, extensions = [Logger(), Files()])\nshow(ws); print(\"\\n\\n\")\n","category":"page"},{"location":"overview/","page":"overview","title":"overview","text":"Similar to a Connection, we can access extensions by indexing Symbols and routes by indexing Strings.","category":"page"},{"location":"overview/","page":"overview","title":"overview","text":"using Toolips\n\nws = WebServer(\"127.0.0.1\", 8000, extensions = [Logger(), Files()])\nws[:Logger].log(\"hello!\")","category":"page"},{"location":"overview/#creating-web-apps","page":"overview","title":"creating web-apps","text":"","category":"section"},{"location":"overview/","page":"overview","title":"overview","text":"Creating a web-app with toolips using the new_webapp method will add the extensions Files and Session to your server. The Files extension adds routes to your server for files stored inside of a particular directory, and the Session extension is used to bring full-stack functionality to toolips.","category":"page"},{"location":"overview/#files","page":"overview","title":"files","text":"","category":"section"},{"location":"overview/","page":"overview","title":"overview","text":"Handling files with the Files extension is incredibly easy, simply add Files(::String) where the single positional argument is your directory from your project folder; by default this is public.","category":"page"},{"location":"overview/","page":"overview","title":"overview","text":"ws = WebServer(\"127.0.0.1\", 8000, extensions = [Logger(), Files()])","category":"page"},{"location":"overview/#session","page":"overview","title":"session","text":"","category":"section"},{"location":"","page":"toolips","title":"toolips","text":"<link rel=\"preconnect\" href=\"https://fonts.googleapis.com\">\n<link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin>\n<link href=\"https://fonts.googleapis.com/css2?family=Poppins&family=Roboto+Mono:wght@100&family=Rubik:wght@500&display=swap\" rel=\"stylesheet\">\n\n<style>\nbody {background-color: #FDF8FF !important;}\nheader {background-color: #FDF8FF !important}\nh1 {\n  font-family: 'Poppins', sans-serif !important;\n  font-family: 'Roboto Mono', monospace !important;\n  font-family: 'Rubik', sans-serif !important;}\n\n  h2 {\n    font-family: 'Poppins', sans-serif !important;\n    font-family: 'Roboto Mono', monospace !important;\n    font-family: 'Rubik', sans-serif !important;}\n    h4 { color: #03045e !important;\n      font-family: 'Poppins', sans-serif !important;\n      font-family: 'Roboto Mono', monospace !important;\n      font-family: 'Rubik', sans-serif !important;}\n      article {\n        border-radius: 30px !important;\n        border-color: lightblue !important;\n      }\n      pre {\n        border-radius: 10px !important;\n        border-color: #FFE5B4 !important;\n      }\np {font-family: 'Poppins', sans-serif;\nfont-family: 'Roboto Mono', monospace;\nfont-family: 'Rubik', sans-serif; color: #565656;}\nbutton {border-radius: 5px; padding: 7px; background-color: lightblue;\ncolor: white; font-size: 16pt; font-weight: bold; border-style: none; cursor: pointer; margin: 5px;}\nbutton:hover {background-color: orange;}\n</style>\n<div align = \"center\">\n<img align = \"center\" width = 300 src = \"assets/toolips.svg\"></img></br></br></br>\n<a href = \"https://toolips.app\"><button>home</button></a>\n<a href = \"https://github.com/ChifiSource/Toolips.jl\"><button>github</button></a>\n<h4 align = \"center\">a manic web-development framework</h4>\n</div>","category":"page"},{"location":"","page":"toolips","title":"toolips","text":"Toolips.jl is a fast, asynchronous, low-memory, full-stack, and reactive web-development framework always written in pure Julia. Here is Toolips.jl in a nutshell:","category":"page"},{"location":"","page":"toolips","title":"toolips","text":"Fast and secure. All routes are served through Julia, and anything that can be written must be written using a method that can only write very specific types.\nHTTPS capable, load balancer friendly. Can easily be deployed with SSL.\nExtendable servers, components, and methods, they are all extendable!\nModular applications. Toolips applications are regular Julia modules.\nRegular Julia projects.\nDeclarative, high-level syntax.\nExtremely low memory usage.\nAsynchronous. Run multiple functions at the same time as you serve to each incoming request.\nVersatile. Toolips.jl can be used for all scenarios, from full-stack web-development to APIs.","category":"page"},{"location":"","page":"toolips","title":"toolips","text":"Toolips","category":"page"},{"location":"#Toolips","page":"toolips","title":"Toolips","text":"Created in February, 2022 by chifi - an open source software dynasty. by team toolips This software is MIT-licensed.\n\nToolips\n\nToolips.jl is a fast, asynchronous, low-memory, full-stack, and reactive web-development framework always written in pure Julia.\n\nModule Composition\n\nToolips\n\n\n\ninterface\n\"Extensions.jl\"\n\"Components.jl\"\n\n\n\nserver\n\"Core.jl\"\n\n\n\n\n\n","category":"module"},{"location":"#adding-toolips","page":"toolips","title":"adding toolips","text":"","category":"section"},{"location":"","page":"toolips","title":"toolips","text":"The easiest way to add the package is to add it directly from the Pkg Registry. Toolips is available in the julia/General Registry.","category":"page"},{"location":"#stable","page":"toolips","title":"stable","text":"","category":"section"},{"location":"","page":"toolips","title":"toolips","text":"using Pkg; Pkg.add(\"Toolips\")","category":"page"},{"location":"","page":"toolips","title":"toolips","text":"julia> # Press ] to enter your Pkg REPL\njulia> ]\npkg> add Toolips","category":"page"},{"location":"","page":"toolips","title":"toolips","text":"You can also add the package by URL:","category":"page"},{"location":"","page":"toolips","title":"toolips","text":"using Pkg; Pkg.add(url = \"https://github.com/ChifiSource/Toolips.jl.git\")","category":"page"},{"location":"","page":"toolips","title":"toolips","text":"julia> # Press ] to enter your Pkg REPL\njulia> ]\npkg> add https://github.com/ChifiSource/Toolips.jl.git","category":"page"},{"location":"#unstable","page":"toolips","title":"unstable","text":"","category":"section"},{"location":"","page":"toolips","title":"toolips","text":"Alternatively, you could also add the Unstable branch of toolips. This could provide extended functionality and updates, but there is no guarantee that all of the additions will be completely working. It is possible to add this revision from the General registry, however, it is recommended that you add Unstable revisions by URL instead.","category":"page"},{"location":"","page":"toolips","title":"toolips","text":"julia> # Press ] to enter your Pkg REPL\njulia> ]\npkg> add Toolips#Unstable","category":"page"},{"location":"","page":"toolips","title":"toolips","text":"You can also add the package by URL:","category":"page"},{"location":"","page":"toolips","title":"toolips","text":"using Pkg; Pkg.add(url = \"https://github.com/ChifiSource/Toolips.jl.git#Unstable\")","category":"page"},{"location":"","page":"toolips","title":"toolips","text":"julia> # Press ] to enter your Pkg REPL\njulia> ]\npkg> add https://github.com/ChifiSource/Toolips.jl.git#Unstable","category":"page"},{"location":"#methodology","page":"toolips","title":"methodology","text":"","category":"section"},{"location":"","page":"toolips","title":"toolips","text":"Versatility - Toolips seeks to be more versatile than your typical web-development frameworks.","category":"page"},{"location":"","page":"toolips","title":"toolips","text":"In a typical web-development framework, you learn the framework for a specific application; some frameworks are capable of creating API's, others are capable of developing an actual templated page, and very few are capable of fullstack web-development. Toolips wraps all of these abilities into one by allowing the developer to choose which features they want in thier project and add them accordingly via extensions.","category":"page"},{"location":"","page":"toolips","title":"toolips","text":"Julia-bound - There is no writing HTML, CSS, or Javascript to get your projects working.","category":"page"},{"location":"","page":"toolips","title":"toolips","text":"Everything is written in pure Julia, and rendered by a function pipeline. Toolips projects are regular Julia modules that can be pushed to Pkg, distributed, and shared.","category":"page"},{"location":"","page":"toolips","title":"toolips","text":"Low-memory - Toolips has incredibly low memory usage. Whereas a typical asynchronous web-server","category":"page"},{"location":"","page":"toolips","title":"toolips","text":"serving 100 people a day may use anywhere from 1GB-5GB of memory, toolips apps rarely crest over the bounds of 1GB of memory usage.","category":"page"},{"location":"","page":"toolips","title":"toolips","text":"Asynchronous - Asynchronicity is incredibly important if you want to serve the same function","category":"page"},{"location":"","page":"toolips","title":"toolips","text":"set with different definitions to multiple people. Toolips is completely Asynchronous.","category":"page"},{"location":"","page":"toolips","title":"toolips","text":"Declarative - Web-development frameworks shouldn't be hard to use. Toolips has an easy-to-use","category":"page"},{"location":"","page":"toolips","title":"toolips","text":"high-level API, with a lot more capabilities under the hood via the extensions when needed.","category":"page"},{"location":"","page":"toolips","title":"toolips","text":"Extendable - Toolips has a core focus on extendability. Everything in the library, from Components, to","category":"page"},{"location":"","page":"toolips","title":"toolips","text":"ServerExtensions, to Connections, to Servables, are all extendable. You can read guides on extending each one in their respective sections. This makes it possible to do a lot more with a lot less, as others might have already created what you are looking for.","category":"page"},{"location":"#declarative-programming","page":"toolips","title":"declarative programming","text":"","category":"section"},{"location":"","page":"toolips","title":"toolips","text":"Toolips has a large central focus on declarative programming. Most calls in toolips are method calls that are often used to mutate different types.","category":"page"},{"location":"#multi-paradigm-programming","page":"toolips","title":"multi-paradigm programming","text":"","category":"section"},{"location":"","page":"toolips","title":"toolips","text":"Toolips follows a programming pattern of a functional core and an imperative shell, with an API that follows a functional design pattern. The center of toolips serving revolves around a function pipeline, with functions held as fields of different types. The actual high-level interface to this, however, is focused on being mutational and functional.","category":"page"},{"location":"#incremental-development","page":"toolips","title":"incremental development","text":"","category":"section"},{"location":"","page":"toolips","title":"toolips","text":"Toolips follows an incremental development process. This process consists of four main steps that are incrementally repeated. The first step is the planning stage, where new additions to toolips are planned and discussed. The second step is the design step, where the core functionalities of a given addition are implemented. After this comes the research and programming stage, where the exact details of how to do things the best way in the context are researched and implemented.","category":"page"},{"location":"#doc-contents","page":"toolips","title":"doc contents","text":"","category":"section"},{"location":"","page":"toolips","title":"toolips","text":"","category":"page"}]
}
